# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import _shared_pb2 as __shared__pb2
import subnet_pb2 as subnet__pb2


class SubnetServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSubnetById = channel.unary_unary(
                '/SubnetService/GetSubnetById',
                request_serializer=__shared__pb2.id.SerializeToString,
                response_deserializer=subnet__pb2.SubnetResponse.FromString,
                )
        self.GetSubnetByName = channel.unary_unary(
                '/SubnetService/GetSubnetByName',
                request_serializer=__shared__pb2.name.SerializeToString,
                response_deserializer=subnet__pb2.SubnetResponse.FromString,
                )
        self.GetSubnetByIpAddress = channel.unary_unary(
                '/SubnetService/GetSubnetByIpAddress',
                request_serializer=__shared__pb2.id.SerializeToString,
                response_deserializer=subnet__pb2.SubnetResponse.FromString,
                )
        self.AddSubnet = channel.unary_unary(
                '/SubnetService/AddSubnet',
                request_serializer=subnet__pb2.subnet.SerializeToString,
                response_deserializer=subnet__pb2.SubnetResponse.FromString,
                )
        self.UpdateSubnet = channel.unary_unary(
                '/SubnetService/UpdateSubnet',
                request_serializer=subnet__pb2.subnet.SerializeToString,
                response_deserializer=subnet__pb2.SubnetResponse.FromString,
                )
        self.DeleteSubnet = channel.unary_unary(
                '/SubnetService/DeleteSubnet',
                request_serializer=__shared__pb2.id.SerializeToString,
                response_deserializer=__shared__pb2.ResponseStatus.FromString,
                )


class SubnetServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetSubnetById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSubnetByName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSubnetByIpAddress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddSubnet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSubnet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSubnet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SubnetServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSubnetById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSubnetById,
                    request_deserializer=__shared__pb2.id.FromString,
                    response_serializer=subnet__pb2.SubnetResponse.SerializeToString,
            ),
            'GetSubnetByName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSubnetByName,
                    request_deserializer=__shared__pb2.name.FromString,
                    response_serializer=subnet__pb2.SubnetResponse.SerializeToString,
            ),
            'GetSubnetByIpAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSubnetByIpAddress,
                    request_deserializer=__shared__pb2.id.FromString,
                    response_serializer=subnet__pb2.SubnetResponse.SerializeToString,
            ),
            'AddSubnet': grpc.unary_unary_rpc_method_handler(
                    servicer.AddSubnet,
                    request_deserializer=subnet__pb2.subnet.FromString,
                    response_serializer=subnet__pb2.SubnetResponse.SerializeToString,
            ),
            'UpdateSubnet': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSubnet,
                    request_deserializer=subnet__pb2.subnet.FromString,
                    response_serializer=subnet__pb2.SubnetResponse.SerializeToString,
            ),
            'DeleteSubnet': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSubnet,
                    request_deserializer=__shared__pb2.id.FromString,
                    response_serializer=__shared__pb2.ResponseStatus.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SubnetService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SubnetService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetSubnetById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SubnetService/GetSubnetById',
            __shared__pb2.id.SerializeToString,
            subnet__pb2.SubnetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSubnetByName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SubnetService/GetSubnetByName',
            __shared__pb2.name.SerializeToString,
            subnet__pb2.SubnetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSubnetByIpAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SubnetService/GetSubnetByIpAddress',
            __shared__pb2.id.SerializeToString,
            subnet__pb2.SubnetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddSubnet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SubnetService/AddSubnet',
            subnet__pb2.subnet.SerializeToString,
            subnet__pb2.SubnetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateSubnet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SubnetService/UpdateSubnet',
            subnet__pb2.subnet.SerializeToString,
            subnet__pb2.SubnetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteSubnet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SubnetService/DeleteSubnet',
            __shared__pb2.id.SerializeToString,
            __shared__pb2.ResponseStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
